{
  "hash": "e585b4b39f3eee1207098264619fb48c",
  "result": {
    "markdown": "---\ntitle: \"Organization\"\nformat: revealjs\n---\n\n\n## I urge you to consult:\n\n[Karl Broman's Notes](https://kbroman.org/Tools4RR/assets/lectures/06_org_eda_withnotes.pdf)\n\n\n\n\n\n# Before I forget, BACK UP YOUR STUFF!!\n\n## Organizing your stuff\n\n::::{.columns}\n:::{.column width=\"50%\"}\n\n```\n├── Advising\n│   ├── arash\n│   ├── gian-carlo\n├── CV\n├── Computing\n│   ├── FKF\n│   ├── batchtools.slurm.tmpl\n│   ├── computecanada_notes.md\n│   ├── ghclass\n│   └── spatio-temporal-exp-fam\n├── Grants\n│   ├── B&E JSM 2010\n│   ├── CANSSI RRP 2020\n│   ├── NSERC 2020\n├── LettersofRec\n├── Manuscripts\n│   ├── Old\n├── Referee reports\n├── Talks\n│   ├── JobTalk2020\n│   ├── ubc-stat-covid-talk\n│   └── utoronto-grad-advice\n├── Teaching\n│   ├── stat-406\n│   ├── stat-550\n│   ├── zzzz CMU TA\n│   └── zzzz booth\n└── Website\n```\n:::\n\n:::{.column width=\"50%\"}\n\n### Inside a project\n\n```\n.\n├── README.md\n├── Summary of Goals.rtf\n├── cluster_output\n├── code\n├── data\n├── dsges-github.Rproj\n├── manuscript\n└── waldman-triage\n```\n:::\n::::\n\n* Separate raw / processed data\n* Include a README\n* Ideally have a MAKEFILE\n* Under version control, shared with collaborator\n\n\n## Basic principles\n\n* Develop your own system\n* Put everything in a common directory\n* Be consistent\n    – directory structure; names\n* Separate raw from processed data\n* Separate code from data\n* It should be obvious what code created what files, and what the dependencies are.\n* [No hand-editing of data files]{.secondary}\n* [Don’t use spaces in file names]{.secondary}\n* Use relative paths, not absolute paths\n  - `../blah` not `~/blah` or `/users/dajmcdon/blah`\n  - The `{here}` package in `R` is great for this\n  \n## Problem: Coordinating with collaborators\n\n* Where to put data that multiple people will work with?\n* Where to put intermediate/processed data?\n* Where to indicate the code that created those processed data files?\n* How to divvy up tasks and know who did what?\n* Need to agree on directory structure and file naming conventions\n\n[GitHub is (I think) the ideal solution, but not always feasible.]{.secondary}\n\n## Problem: Collaborators who don’t use GitHub\n\n* Use GitHub yourself\n* Copy files to/from some shared space\n    - Ideally, in an automated way (Dropbox, S3 Bucket)\n    - Avoid Word at all costs. Google Docs if needed.\n    - Word and Git do not mix\n    - [Last resort:]{.secondary} Word file in Dropbox. Everything else nicely organized on your end. Rmd file with similar structure to Manuscript that does the analysis.\n* Commit their changes.\n\n. . .\n\nOverleaf has Git built in (paid tier). I don't like Overleaf. Costs money, the viewer is crap and so is the editor. I suggest you avoid it.\n\n\n## Using Rmarkdown/Quarto for most things\n\n### Your goal is to [Avoid at all costs]{.secondary}:\n\n* \"How did I create this plot?\"\n* \"Why did I decide to omit those six samples?\"\n* \"Where (on the web) did I find these data?\"\n* \"What was that interesting gene/feature/predictor?\"\n\n<hr>\n \nReally useful resource:\n\n* Emily Reiderer [RmdDD](https://emilyriederer.netlify.app/post/rmarkdown-driven-development/)\n* Talk [Slides](https://www.slideshare.net/EmilyRiederer/rmarkdown-driven-development-rstudioconf-2020)\n\n# My workflow\n\n## The basics\n\n### 1. \n\nI do all class documents in Rmarkdown/Quarto. Notes, slides, etc. Organized in Github repos:\n\n```\n├── github-org\n│  ├── admm-cd\n│  ├── class-management\n│  ├── convexity-exercises\n...\n│  └── useful-materials\n├── instructor-private\n│  ├── README.md\n│  └── brief-summary\n└── student-public\n    ├── README.md\n    ├── docs\n    └── lecture-slides\n```\n\n\n## The basics\n\n### 2. \n\nWhen working out new code for a project, I use a combination of R package (as I get close to completion) and Rmarkdown.\n\n* Many stat journals require reproducible, documented code. An R package is great for this.\n* Rmarkdown alone lets me document as I go.\n    \n### 3. \n\nMy students are required to give me reports in Rmarkdown or Google docs (for practice).\n\n## For professional presentations\n\n~~I use Rmarkdown + Beamer:~~ Now I use Rmd + Xaringan (see [`dajmcdon/talk-template`](https://github.com/dajmcdon/talk-template))\n\n```{{yaml}}\n---\ntitle: \"Statistical approaches to epidemic forecasting\"\nauthor: \"Daniel J. McDonald\"\ndate: \"10 February 2023\"\noutput:\n  xaringan::moon_reader:\n    css: [src/xaringan-themer.css, src/slides-style.css]\n    nature:\n      beforeInit: [\"src/macros.js\", \"https://platform.twitter.com/widgets.js\"]\n      highlightStyle: github\n      highlightLines: true\n      ratio: 16:9\n      slideNumber: true\n      countIncrementalSlides: true\n    seal: false\n---\n```\n\n## The old presentation (when I was in Grad School)\n\n1. Write lots of LaTeX, `R` code in separate files\n2. Need a figure. Run `R` code, get figure, save as `.pdf`.\n3. Recompile LaTeX. Axes are unreadable. Back to `R`, rerun `R` code, ...\n4. Recompile LaTeX. Can't distinguish lines. Back to `R`, rerun `R` code, ...\n5. Etc, etc.\n\n### Now:  \nCode and Text live in one file. I just recompile.\n\n## The old manuscript\n\nSimilar to the old presentation.\n\n### Now:  \n\n1. `R` package with documented code, available on GitHub.  \n2. One script to run the analysis, one to gather the results.  \n3. One `.Rmd` file to take in the results, do preprocessing, generate all figures.  \n4. LaTeX file on Journal style.\n\n### The optimal\n\nSame as above but with a MAKEFILE to automatically run parts of 1--4 as needed\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}